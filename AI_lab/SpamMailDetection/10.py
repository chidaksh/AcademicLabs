# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v2-rTlB0paK_HSHJKP5p9B25oVzPoYmn
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn import svm
from sklearn.metrics import f1_score
import seaborn as sns
import matplotlib.pyplot as plt
import sys


def method(c_val,kernel_fun,degree = 2):

  if (kernel_fun != 'quadratic'):
    clf = svm.SVC(C = c_val,kernel = kernel_fun)
    clf.fit(x_train,y_train)
    y_hat = clf.predict(x_test)
    print("Accuracy of the Test data is: ",f1_score(y_test,y_hat,average= 'weighted'))

  else:
    clf = svm.SVC(C = c_val,kernel = 'poly',degree = 2)
    clf.fit(x_train,y_train)
    y_hat = clf.predict(x_test)
    print("Accuracy of the Test data is: ",f1_score(y_test,y_hat,average= 'weighted'))

  return 


if __name__ == '__main__':
  if(len(sys.argv)==5):
    if (sys.argv[1]!= 'spambase.names' or sys.argv[2]!='spambase.data' ):
      print("Enter correct file names as argument")
      exit()
    if(sys.argv[4]!='rbf' and sys.argv[4]!='quadratic' and sys.argv[4]!='linear'):
      print("Enter correct kernel function")
      exit()
    
    f = open(sys.argv[1], "r")
    lines = f.readlines()
    line=[]
    columns=[]
    line = lines[-57:]
  
    for x in line :
          k = x.split(':')
          columns.append(k[0])
    columns.append('Class')

    f.close()


    data = pd.read_csv(sys.argv[2],header = None,names = columns)
    to_change_dtype = ['capital_run_length_average','capital_run_length_longest','capital_run_length_total','Class'] 
    data[to_change_dtype] = data[to_change_dtype].astype(float)

    X = np.asarray(data[columns[:-1]])
    Y = np.asarray(data[columns[-1:]]).reshape(-1,)
    X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))

    global x_train,x_test,y_train,y_test
    x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size = 0.3,random_state = 4)
    method(float(sys.argv[3]),sys.argv[4])
  else:
    print("Give all 5 arguments")